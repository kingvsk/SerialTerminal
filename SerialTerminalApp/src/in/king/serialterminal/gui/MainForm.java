package in.king.serialterminal.gui;

import gnu.io.CommPortIdentifier;
import gnu.io.NoSuchPortException;
import gnu.io.PortInUseException;
import gnu.io.SerialPort;
import gnu.io.SerialPortEvent;
import gnu.io.SerialPortEventListener;
import gnu.io.UnsupportedCommOperationException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Enumeration;
import java.util.TooManyListenersException;
import javax.swing.JOptionPane;

/**
 * @Title : MainForm.java
 * @author : Sathishkumar Varatharasu
 * @email : kingvsk@gmail.com
 */
public class MainForm extends javax.swing.JFrame implements SerialPortEventListener {

    // Global Variables Declaration...
    private CommPortIdentifier portId = null;
    private SerialPort serialPort;
    private static OutputStream outputStream;
    private InputStream inputStream;

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        loadAvailableSerialPorts();
        updateDefaultSettings();
        disconnectButton.setEnabled(false);
        inputStringTextField.setEnabled(false);
        sendStringButton.setEnabled(false);
        inputASCIITextField.setEnabled(false);
        sendASCIIButton.setEnabled(false);
    }

    private void loadAvailableSerialPorts() {
        // Load the available serial ports...
        Enumeration ports = CommPortIdentifier.getPortIdentifiers();
        while (ports.hasMoreElements()) {
            CommPortIdentifier port = (CommPortIdentifier) ports.nextElement();
            if (port.getPortType() == CommPortIdentifier.PORT_SERIAL) {
                availablePortsComboBox.addItem(port.getName());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        receivedRawDataTextArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        receivedReadableDataTextArea = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        dataBitsComboBox = new javax.swing.JComboBox();
        baudRateComboBox = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        connectButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        stopBitsComboBox = new javax.swing.JComboBox();
        parityComboBox = new javax.swing.JComboBox();
        handshakeComboBox = new javax.swing.JComboBox();
        availablePortsComboBox = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        defaultButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        disconnectButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        sendStringButton = new javax.swing.JButton();
        inputASCIITextField = new javax.swing.JTextField();
        inputStringTextField = new javax.swing.JTextField();
        sendASCIIButton = new javax.swing.JButton();
        clearDataButton = new javax.swing.JButton();
        enableLineWrapCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Serial Terminal");
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setResizable(false);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Serial Terminal");

        receivedRawDataTextArea.setEditable(false);
        receivedRawDataTextArea.setColumns(20);
        receivedRawDataTextArea.setRows(5);
        jScrollPane1.setViewportView(receivedRawDataTextArea);

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Received Data (Raw)");

        receivedReadableDataTextArea.setEditable(false);
        receivedReadableDataTextArea.setColumns(20);
        receivedReadableDataTextArea.setRows(5);
        jScrollPane2.setViewportView(receivedReadableDataTextArea);

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 102, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Received Data (Human Readable)");

        dataBitsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "8", "7", "6", "5" }));

        baudRateComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "19200", "9600", "4800", "2400", "1200" }));

        jLabel8.setText("Data Bits");

        jLabel7.setText("Stop Bits");

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        jLabel10.setText("Handshake");

        stopBitsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "1.5" }));

        parityComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Odd", "Even" }));

        handshakeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "RTS/CTS IN", "RTS/CTS OUT", "XON/XOFF IN", "XON/XOFF OUT" }));

        jLabel6.setText("Baud Rate");

        defaultButton.setText("Default");
        defaultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultButtonActionPerformed(evt);
            }
        });

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 102, 0));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Serial Port Settings");

        jLabel9.setText("Parity");

        jLabel5.setText("Available Ports");

        disconnectButton.setText("Disconnect");
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(parityComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dataBitsComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(stopBitsComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(baudRateComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(handshakeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(availablePortsComboBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(connectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(disconnectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(defaultButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(availablePortsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(baudRateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(stopBitsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(dataBitsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(parityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(handshakeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(disconnectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(defaultButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        sendStringButton.setText("Send String to Serial Port");
        sendStringButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendStringButtonActionPerformed(evt);
            }
        });

        inputASCIITextField.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N

        inputStringTextField.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N

        sendASCIIButton.setText("Send ASCII(Raw) to Serial Port");
        sendASCIIButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendASCIIButtonActionPerformed(evt);
            }
        });

        clearDataButton.setText("Clear Data");
        clearDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearDataButtonActionPerformed(evt);
            }
        });

        enableLineWrapCheckBox.setText("Enable Line Wrap");
        enableLineWrapCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                enableLineWrapCheckBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputASCIITextField)
                    .addComponent(inputStringTextField)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sendASCIIButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sendStringButton, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(clearDataButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(enableLineWrapCheckBox)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputStringTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendStringButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(inputASCIITextField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendASCIIButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enableLineWrapCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // Connect the interface...        
        connectButton.setEnabled(false);
        disconnectButton.setEnabled(true);
        defaultButton.setEnabled(false);
        availablePortsComboBox.setEnabled(false);
        baudRateComboBox.setEnabled(false);
        dataBitsComboBox.setEnabled(false);
        stopBitsComboBox.setEnabled(false);
        parityComboBox.setEnabled(false);
        handshakeComboBox.setEnabled(false);
        inputStringTextField.setEnabled(true);
        sendStringButton.setEnabled(true);
        inputASCIITextField.setEnabled(true);
        sendASCIIButton.setEnabled(true);
        connectSerialPort();
    }//GEN-LAST:event_connectButtonActionPerformed

    private void connectSerialPort() {
        try {
            String selectedPort = availablePortsComboBox.getSelectedItem().toString();
            portId = CommPortIdentifier.getPortIdentifier(selectedPort);
            System.out.println("Port Found :" + portId.getName() + "\n");
            serialPort = (SerialPort) portId.open("Open port", 5000);
            serialPort.setInputBufferSize(4096);
            outputStream = serialPort.getOutputStream();
            inputStream = serialPort.getInputStream();
            serialPort.notifyOnOutputEmpty(true);
            serialPort.addEventListener(this);
            serialPort.notifyOnDataAvailable(true);
            int baudrate = Integer.parseInt(baudRateComboBox.getSelectedItem().toString());
            int databits = Integer.parseInt(dataBitsComboBox.getSelectedItem().toString());
            int stopbits = stopBitsComboBox.getSelectedIndex() + 1;
            int parity = parityComboBox.getSelectedIndex();
            int handShake = handshakeComboBox.getSelectedIndex();
            serialPort.setSerialPortParams(baudrate, databits, stopbits, parity);
            if (handShake == 0) {
                serialPort.setFlowControlMode(SerialPort.FLOWCONTROL_NONE);
            } else if (handShake == 1) {
                serialPort.setFlowControlMode(SerialPort.FLOWCONTROL_RTSCTS_IN);
            } else if (handShake == 2) {
                serialPort.setFlowControlMode(SerialPort.FLOWCONTROL_RTSCTS_OUT);
            } else if (handShake == 3) {
                serialPort.setFlowControlMode(SerialPort.FLOWCONTROL_XONXOFF_IN);
            } else if (handShake == 4) {
                serialPort.setFlowControlMode(SerialPort.FLOWCONTROL_XONXOFF_OUT);
            }
            JOptionPane.showMessageDialog(this, "Port " + selectedPort + " is now Connected...");
        } catch (NoSuchPortException e) {
            System.out.println("No Such Port Exception : " + e);
            System.out.println("Port Not Found :" + portId.getName());
        } catch (IOException e) {
            System.out.println("IO Exception : " + e);
        } catch (TooManyListenersException e) {
            System.out.println("Too Many Listeners Exception : " + e);
        } catch (PortInUseException e) {
            System.out.println("Port In Use Exception : " + e);
        } catch (UnsupportedCommOperationException e) {
            System.out.println("Unsupported COM operation ; " + e);
        }
    }

    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed
        // Disconnect the interface...
        connectButton.setEnabled(true);
        disconnectButton.setEnabled(false);
        defaultButton.setEnabled(true);
        availablePortsComboBox.setEnabled(true);
        baudRateComboBox.setEnabled(true);
        dataBitsComboBox.setEnabled(true);
        stopBitsComboBox.setEnabled(true);
        parityComboBox.setEnabled(true);
        handshakeComboBox.setEnabled(true);
        inputStringTextField.setEnabled(false);
        sendStringButton.setEnabled(false);
        inputASCIITextField.setEnabled(false);
        sendASCIIButton.setEnabled(false);
        disconnectSerialPort();
    }//GEN-LAST:event_disconnectButtonActionPerformed

    private void disconnectSerialPort() {
        if (serialPort != null) {
            serialPort.close();
        }
        JOptionPane.showMessageDialog(this, "Port disconnected...");
    }

    private void defaultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultButtonActionPerformed
        // Load the default settings...
        updateDefaultSettings();
    }//GEN-LAST:event_defaultButtonActionPerformed

    private void sendASCIIButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendASCIIButtonActionPerformed
        // Send hexadecimal value through selected serial port...
        try {
            String inputData = inputASCIITextField.getText();
            if (inputData.length() > 0) {                
                int data = Integer.valueOf(inputData);
                outputStream.write(data);
                inputASCIITextField.setText("");
                System.out.println("Hexadecimal data sent successfully");
                JOptionPane.showMessageDialog(this, "Hexadecimal data sent successfully");
            } else {
                JOptionPane.showMessageDialog(this, "Please enter the data to send");
                inputASCIITextField.requestFocus();
            }
        } catch (NumberFormatException e) {
            System.out.println("Number Format Exception : " + e);
            JOptionPane.showMessageDialog(this, "Sending Hexadecimal data failed");            
        } catch (IOException e) {
            System.out.println("IO Exception : " + e);
            JOptionPane.showMessageDialog(this, "Sending Hexadecimal data failed");
        }
    }//GEN-LAST:event_sendASCIIButtonActionPerformed

    private void clearDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearDataButtonActionPerformed
        // Clear the received data...
        clearReceivedData();
    }//GEN-LAST:event_clearDataButtonActionPerformed

    private void enableLineWrapCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_enableLineWrapCheckBoxItemStateChanged
        // TODO add your handling code here:
        if (enableLineWrapCheckBox.isSelected()) {
            receivedRawDataTextArea.setLineWrap(true);
            receivedReadableDataTextArea.setLineWrap(true);
        } else {
            receivedRawDataTextArea.setLineWrap(false);
            receivedReadableDataTextArea.setLineWrap(false);
        }
    }//GEN-LAST:event_enableLineWrapCheckBoxItemStateChanged

    private void sendStringButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendStringButtonActionPerformed
        // Send hexadecimal value through selected serial port...
        try {
            String data = inputStringTextField.getText();
            if (data != null && !data.isEmpty()) {
                outputStream.write(data.getBytes());
                inputStringTextField.setText("");
                System.out.println("String data sent successfully");
                JOptionPane.showMessageDialog(this, "String data sent successfully");
            } else {
                JOptionPane.showMessageDialog(this, "Please enter the data to send");
                inputStringTextField.requestFocus();
            }
        } catch (NumberFormatException e) {
            System.out.println("Number Format Exception : " + e);
            JOptionPane.showMessageDialog(this, "Sending String data failed");
        } catch (IOException e) {
            System.out.println("IO Exception : " + e);
            JOptionPane.showMessageDialog(this, "Sending String data failed");
        }
    }//GEN-LAST:event_sendStringButtonActionPerformed

    private void clearReceivedData() {
        receivedRawDataTextArea.setText("");
        receivedReadableDataTextArea.setText("");
    }

    private void updateDefaultSettings() {
        // Change the configuration values to default...
        baudRateComboBox.setSelectedItem("9600");
        stopBitsComboBox.setSelectedItem("1");
        dataBitsComboBox.setSelectedItem("8");
        parityComboBox.setSelectedItem("None");
        handshakeComboBox.setSelectedIndex(0);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox availablePortsComboBox;
    private javax.swing.JComboBox baudRateComboBox;
    private javax.swing.JButton clearDataButton;
    private javax.swing.JButton connectButton;
    private javax.swing.JComboBox dataBitsComboBox;
    private javax.swing.JButton defaultButton;
    private javax.swing.JButton disconnectButton;
    private javax.swing.JCheckBox enableLineWrapCheckBox;
    private javax.swing.JComboBox handshakeComboBox;
    private javax.swing.JTextField inputASCIITextField;
    private javax.swing.JTextField inputStringTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox parityComboBox;
    private javax.swing.JTextArea receivedRawDataTextArea;
    private javax.swing.JTextArea receivedReadableDataTextArea;
    private javax.swing.JButton sendASCIIButton;
    private javax.swing.JButton sendStringButton;
    private javax.swing.JComboBox stopBitsComboBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public void serialEvent(SerialPortEvent spe) {
        // Serial Event listener for incomming data...

        switch (spe.getEventType()) {
            case SerialPortEvent.BI:
            case SerialPortEvent.OE:
            case SerialPortEvent.FE:
            case SerialPortEvent.PE:
            case SerialPortEvent.CD:
            case SerialPortEvent.CTS:
            case SerialPortEvent.DSR:
            case SerialPortEvent.RI:
            case SerialPortEvent.DATA_AVAILABLE:
                try {
                    int i = inputStream.read();     // Read the data from input stream
                    System.out.println("Value : " + i);
                    //System.out.println("\nReceived Value : " + i + "\tEquavalent Char : " + (char) i);                    
                    receivedRawDataTextArea.append(String.valueOf((char) i));
                    receivedRawDataTextArea.append(getReadableValue(i));
//                
                } catch (IOException ioex) {
                    JOptionPane.showMessageDialog(this, "\n\nError : " + ioex);
                }
        }
    }

    /**
     * @param receivedValue the received character from serial port...
     */
    private String getReadableValue(int receivedValue) {
        // Display the incomming data into talog...
        if (receivedValue == 0) {
            return "[NUL]";
        } else if (receivedValue == 1) {
            return "[SOH]";
        } else if (receivedValue == 2) {
            return "[STX]";
        } else if (receivedValue == 3) {
            return "[ETX]";
        } else if (receivedValue == 4) {
            return "[EOT]";
        } else if (receivedValue == 5) {
            return "[ENQ]";
        } else if (receivedValue == 6) {
            return "[ACK]";
        } else if (receivedValue == 7) {
            return "[BEL]";
        } else if (receivedValue == 8) {
            return "[BS]";
        } else if (receivedValue == 9) {
            return "[TAB]";
        } else if (receivedValue == 10) {
            return "[LF]";
        } else if (receivedValue == 11) {
            return "[VT]";
        } else if (receivedValue == 12) {
            return "[FF]";
        } else if (receivedValue == 13) {
            return "[CR]";
        } else if (receivedValue == 14) {
            return "[SO]";
        } else if (receivedValue == 15) {
            return "[SI]";
        } else if (receivedValue == 16) {
            return "[DLE]";
        } else if (receivedValue == 17) {
            return "[DC1]";
        } else if (receivedValue == 18) {
            return "[DC2]";
        } else if (receivedValue == 19) {
            return "[DC3]";
        } else if (receivedValue == 20) {
            return "[DC4]";
        } else if (receivedValue == 21) {
            return "[NAK]";
        } else if (receivedValue == 22) {
            return "[SYN]";
        } else if (receivedValue == 23) {
            return "[ETB]";
        } else if (receivedValue == 24) {
            return "[CAN]";
        } else if (receivedValue == 25) {
            return "[EM]";
        } else if (receivedValue == 26) {
            return "[EOF]";
        } else if (receivedValue == 27) {
            return "[ESC]";
        } else if (receivedValue == 28) {
            return "[FS]";
        } else if (receivedValue == 29) {
            return "[GS]";
        } else if (receivedValue == 30) {
            return "[RS]";
        } else if (receivedValue == 31) {
            return "[US]";
        } else if (receivedValue == 32) {
            return " ";
        } else if (receivedValue > 32 && receivedValue < 128) {
            return String.valueOf((char) receivedValue);
        } else {
            return "ASC[" + receivedValue + "]";
        }
    }
}
